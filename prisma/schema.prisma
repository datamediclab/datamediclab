
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  fullName  String
  phone     String
  email     String?
  lineId    String?
  createdAt DateTime       @default(now())
  id        Int            @id @default(autoincrement())
  notes     CustomerNote[]
  devices   Device[]
}

model Device {
  deviceType       DeviceType
  capacity         String
  serialNumber     String?
  description      String?
  currentStatus    StatusEnum
  statusHistoryRaw Json?
  technicianNote   String?
  receivedAt       DateTime           @default(now())
  createdAt        DateTime           @default(now())
  id               Int                @id @default(autoincrement())
  customerId       Int
  brandId          Int
  modelId          Int?
  technicianId     Int?
  changedById      Int?
  activityLogs     AdminActivityLog[]
  brand            Brand              @relation(fields: [brandId], references: [id])
  changedBy        Admin?             @relation("StatusChangedBy", fields: [changedById], references: [id])
  customer         Customer           @relation(fields: [customerId], references: [id])
  model            BrandModel?        @relation(fields: [modelId], references: [id])
  technician       Admin?             @relation("Technician", fields: [technicianId], references: [id])
  paymentRecords   PaymentRecord[]
  RecoveryJob      RecoveryJob[]
  repairRecords    RepairRecord[]
  statusHistories  StatusHistory[]
  trackLogs        TrackLog[]
}

model TrackLog {
  action    String
  note      String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  deviceId  Int
  actorId   Int?
  actor     Admin?   @relation("TrackLogActor", fields: [actorId], references: [id])
  device    Device   @relation(fields: [deviceId], references: [id])
}

model RepairRecord {
  repairDate   DateTime @default(now())
  description  String?
  cost         Float
  note         String?
  createdAt    DateTime @default(now())
  id           Int      @id @default(autoincrement())
  deviceId     Int
  technicianId Int?
  device       Device   @relation(fields: [deviceId], references: [id])
  technician   Admin?   @relation("RepairRecordTechnician", fields: [technicianId], references: [id])
}

model StatusHistory {
  from        StatusEnum
  to          StatusEnum
  note        String?
  changedAt   DateTime   @default(now())
  id          Int        @id @default(autoincrement())
  deviceId    Int
  changedById Int?
  changedBy   Admin?     @relation("StatusHistoryChangedBy", fields: [changedById], references: [id])
  device      Device     @relation(fields: [deviceId], references: [id])
}

model PaymentRecord {
  amount   Float
  method   PaymentMethod
  paidAt   DateTime      @default(now())
  note     String?
  id       Int           @id @default(autoincrement())
  deviceId Int
  device   Device        @relation(fields: [deviceId], references: [id])
}

model Admin {
  name            String
  email           String             @unique
  password        String
  role            UserRole
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  id              Int                @id @default(autoincrement())
  activityLogs    AdminActivityLog[]
  changedStatusOf Device[]           @relation("StatusChangedBy")
  technicianOf    Device[]           @relation("Technician")
  RecoveryJob     RecoveryJob[]
  repairJobs      RepairRecord[]     @relation("RepairRecordTechnician")
  statusChanges   StatusHistory[]    @relation("StatusHistoryChangedBy")
  trackLogs       TrackLog[]         @relation("TrackLogActor")
}

model Brand {
  name      String       @unique
  createdAt DateTime     @default(now())
  id        Int          @id @default(autoincrement())
  models    BrandModel[]
  devices   Device[]
}

model BrandModel {
  name      String
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  brandId   Int
  brand     Brand    @relation(fields: [brandId], references: [id])
  devices   Device[]

  @@unique([name, brandId])
}

model AdminActivityLog {
  action    String
  detail    String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  adminId   Int
  deviceId  Int
  admin     Admin    @relation(fields: [adminId], references: [id])
  device    Device   @relation(fields: [deviceId], references: [id])
}

model CustomerNote {
  note       String
  createdAt  DateTime @default(now())
  id         Int      @id @default(autoincrement())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])
}

model RecoveryJob {
  id           Int        @id @default(autoincrement())
  deviceId     Int
  technicianId Int?
  status       StatusEnum
  note         String?
  createdAt    DateTime   @default(now())
  device       Device     @relation(fields: [deviceId], references: [id])
  technician   Admin?     @relation(fields: [technicianId], references: [id])
}

enum StatusEnum {
  WAITING_FOR_CUSTOMER_DEVICE
  UNDER_DIAGNOSIS
  ANALYSIS_COMPLETE
  RECOVERY_IN_PROGRESS
  RECOVERY_SUCCESSFUL
  RECOVERY_FAILED
  DEVICE_RETURNED
}

enum PaymentMethod {
  CASH
  TRANSFER
  CREDIT_CARD
  PROMPT_PAY
}

enum UserRole {
  ADMIN
  STAFF
  SUPERADMIN
}

enum DeviceType {
  HDD
  SSD
  EXTERNAL_DRIVE
  FLASH_DRIVE
  MEMORY_CARD
  OTHER
}




